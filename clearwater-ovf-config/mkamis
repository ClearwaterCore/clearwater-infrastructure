#!/bin/bash

VM_user=root
vpc_id=vpc-6fdf300a

mydir=$(cd `dirname $0`;pwd)
cwd=$(pwd)

cmdname=$(basename $0)

export "PUBLISH=0"
export "no_VAs=0"
export "NO_TEMPLATES=0"
export "node_types=sprout:ralf:homestead,homestead-prov:homestead"
export "node_types=homestead"

usage()
{
    printf "\
Usage: $cmdname [OPTION...]\n\
\n\
Options:\n\
  --publish           publish the OVAs to corporate area\n\
  --no-vas            don't make OVAs/QCOW2s, just leave VMs on vCenter\n\
  --no-templates      don't make vCenter templates, just leave VMs on vCenter\n\
  --node-types TYPES  node types to make (default: $node_types)\n\
  --qualified X       qualifier to be appended to VM/OVA name\n\
  -h, --help          display this usage\n"

    printf "\n"

    exit 0
}

error()
{
    printf "$@"
    printf "\n"

    usage
}

params="$(getopt -o h -l help,publish,no-vas,no-templates,node-types:,qualifier: --name $cmdname -- "$@")"

if [ $? -ne 0 ]; then
    usage
fi

eval set -- "$params"
unset params

while true
do
    case $1 in
        --publish)
        export "PUBLISH=1"
        shift 1
        ;;
        --no-vas)
        export "no_VAs=1"
        shift 1
        ;;
        --no-templates)
        export "NO_TEMPLATES=1"
        shift 1
        ;;
        --node-types)
        export "node_types=${2-}"
        shift 2
        ;;
        --qualifier)
        export "ccQualifier=-${2-}"
        shift 2
        ;;
        --)
        shift
        break
        ;;
        -h|--help)
        usage
        ;;
        *)
        usage
        ;;
    esac
done

if [ "$(id -u)" -ne 0 ]; then
    printf "ERROR: this script must be run as root!\n"
    exit 1
fi

build_base=$(dirname $(cd ${mydir}/..;pwd))
if [ "$(basename ${build_base})" != "cc" ]; then
    printf "ERROR: can't determine build's base directory!\n"
    exit 1
fi

# Pick up the prompting logic
if [ ! -x ${mydir}/payload/var/cc-ovf/bin/ovf-sc ]; then
    printf "ERROR: missing - ${mydir}/payload/var/cc-ovf/bin/ovf-sc!\n"
    exit 1
fi
. ${mydir}/payload/var/cc-ovf/bin/ovf-sc

if [ ! -d "${build_base}/REPO/binary" ]; then
    printf "ERROR: can't determine build's REPO directory!\n"
    exit 1
fi

rm -f ${mydir}/payload/var/cc-ovf/bin/install_ver
if [ "$(cd ${build_base}/REPO/binary; find . -name 'metaswitch-core-sprout_*.install'|wc -l)" -gt 1 ]; then
    avail_vers=( $(cd ${build_base}/REPO/binary; find . -name 'metaswitch-core-sprout_*.install'|sed -e 's#^[^_]*_\([^_]*\)_all.install$#\1#'|sort -u) )
    printf "WARN: couldn't determine CC version!\n"

    # Default to the first version
    install_ver=1
    let "cmd_done=0"
    while [ $cmd_done -eq 0 ]; do
        let "prompt_done=0"
        while [ $prompt_done -eq 0 ]; do
            printf "\nPlease choose one of the following:\n\n"
            let i=1
            for ver in ${avail_vers[@]}; do
                printf "  $i: $ver\n"
                let "i=$i + 1"
            done
            doPrompt "Pick a version" "" "$install_ver"
            if [[ "$RESPONSE" =~ ^[0-9]+$ ]]; then
                if [[ "$RESPONSE" -gt 0 && "$RESPONSE" -le ${#avail_vers[@]} ]]; then
                    let "prompt_done=1"
                else
                    printf "[YOUR INPUT WAS NOT UNDERSTOOD]\n"
                fi
            else
                printf "[YOUR INPUT WAS NOT UNDERSTOOD]\n"
            fi
        done
        install_ver=$RESPONSE

        doConfirm
        cfrm=$?
        if [ $cfrm -eq 1 ]; then
            let "cmd_done=1"
        fi
        if [ $cfrm -eq 2 ]; then
            printf "cancelled by user\n"
            let "cmd_done=1"
            exit 1
        fi
    done

    let "install_ver=$install_ver - 1"
    ccVersion=${avail_vers[$install_ver]}
else
    ccVersion=$(cd ${build_base}/REPO/binary; find . -name 'metaswitch-core*.install'|tail -1|sed -e 's#^[^_]*_\([^_]*\)_all.install$#\1#')
    if [ -z "${ccVersion}" ]; then
        printf "ERROR: couldn't determine CC version!\n"
        exit 1
    fi
fi

printf "${ccVersion}" > ${mydir}/payload/var/cc-ovf/bin/install_ver

dpkg-query -W 2>&1 |grep -q sshpass
if [ $? -ne 0 ]; then
    printf "\
ERROR: The program 'sshpass' is currently not installed. You can install it by typing:\n\
       sudo apt-get install sshpass\n"
    exit 1
fi

printf "\n\
****************************************************************************\n\
*\n\
* AMIs will have Clearwater Core version $(cat ${mydir}/payload/var/cc-ovf/bin/install_ver) installed\n\
*\n\
****************************************************************************\n\n"
ccServiceUpdate=$(echo ${ccVersion}|sed -e 's#^[^-]*-\([^-]*\)-.*$#\1#')
ccMajor=$(echo ${ccVersion}|sed -e 's#^\([^.]*\)[.].*$#\1#')
ubu_base=ubu14-base-v${ccMajor}

node_types=( $(echo $node_types|sed -e 's#:# #g') )

VM_power_down()
{
    aws ec2 describe-instances --filter "Name=tag:Name,Values=$(echo ${1}|sed -e 's#,#\\,#g')" > /tmp/$$.aws 2>&1
    num_found=$(cat /tmp/$$.aws|python -c "import json,sys;obj=json.load(sys.stdin);print len(obj['Reservations'])")
    if [ ${num_found} -eq 1 ]; then
	instance_id=$(cat /tmp/$$.aws|python -c "import json,sys;obj=json.load(sys.stdin);print obj['Reservations'][0]['Instances'][0]['InstanceId']")
        printf "Powering down VM ${1}(${instance_id})...\n"
        printf "\n"

        printf "Waiting for power down to complete..."
	while [ true ]; do
	    aws ec2 stop-instances --instance-ids ${instance_id} > /dev/null 2>&1
	    state=$(aws ec2 describe-instances --filter "Name=tag:Name,Values=$(echo ${1}|sed -e 's#,#\\,#g')"|python -c "import json,sys;obj=json.load(sys.stdin);print obj['Reservations'][0]['Instances'][0]['State']['Name']")
	    if [[ "${state}" == "stopped" || "${state}" == "terminated" ]]; then
		break
	    fi
            printf "."
	    sleep 1
	done
        printf "done\n"
    fi
    rm -f /tmp/$$.aws
}

VM_power_up()
{
    aws ec2 describe-instances --filter "Name=tag:Name,Values=$(echo ${1}|sed -e 's#,#\\,#g')" > /tmp/$$.aws 2>&1
    num_found=$(cat /tmp/$$.aws|python -c "import json,sys;obj=json.load(sys.stdin);print len(obj['Reservations'])")
    if [ ${num_found} -eq 1 ]; then
	instance_id=$(cat /tmp/$$.aws|python -c "import json,sys;obj=json.load(sys.stdin);print obj['Reservations'][0]['Instances'][0]['InstanceId']")
	printf "Powering on VM ${1}(${instance_id})...\n"
	instance_id=$(cat /tmp/$$.aws|python -c "import json,sys;obj=json.load(sys.stdin);print obj['Reservations'][0]['Instances'][0]['InstanceId']")
	aws ec2 start-instances --instance-ids ${instance_id} > /dev/null 2>&1
        printf "\n"

        printf "Waiting for power up to complete..."
	while [ true ]; do
	    state=$(aws ec2 describe-instances --filter "Name=tag:Name,Values=$(echo ${1}|sed -e 's#,#\\,#g')"|python -c "import json,sys;obj=json.load(sys.stdin);print obj['Reservations'][0]['Instances'][0]['State']['Name']")
	    if [ "${state}" == "running" ]; then
		break
	    fi
            printf "."
	    sleep 1
	done
        printf "done\n"

	VM_ip=$(aws ec2 describe-instances --filter "Name=tag:Name,Values=$(echo ${1}|sed -e 's#,#\\,#g')"|python -c "import json,sys;obj=json.load(sys.stdin);print obj['Reservations'][0]['Instances'][0]['NetworkInterfaces'][0]['Association']['PublicIp']")

	printf "Trying to connect to VM ${1}(${instance_id})@${VM_ip}..."
	while [ true ]; do
            sshpass -p '!bootstrap' ssh -q -T -o ConnectTimeout=2 -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null ${VM_user}@${VM_ip} hostname > /dev/null 2>&1
            if [ $? -eq 0 ]; then
		sshpass -p '!bootstrap' ssh -q -T -o ConnectTimeout=2 -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null ${VM_user}@${VM_ip} find /usr > /dev/null 2>&1
		if [ $? -eq 0 ]; then
                    break
		fi
		printf "+"
		continue
            fi
            printf "."
	done
	printf "connected!\n"
    fi
    rm -f /tmp/$$.aws
}

VM_reboot()
{
    aws ec2 describe-instances --filter "Name=tag:Name,Values=$(echo ${1}|sed -e 's#,#\\,#g')" > /tmp/$$.aws 2>&1
    num_found=$(cat /tmp/$$.aws|python -c "import json,sys;obj=json.load(sys.stdin);print len(obj['Reservations'])")
    if [ ${num_found} -eq 1 ]; then
	instance_id=$(cat /tmp/$$.aws|python -c "import json,sys;obj=json.load(sys.stdin);print obj['Reservations'][0]['Instances'][0]['InstanceId']")
	printf "Rebooting VM ${1}(${instance_id})...\n"
	aws ec2 reboot-instances --instance-ids ${instance_id} > /dev/null 2>&1
        printf "\n"

	VM_ip=$(aws ec2 describe-instances --filter "Name=tag:Name,Values=$(echo ${1}|sed -e 's#,#\\,#g')"|python -c "import json,sys;obj=json.load(sys.stdin);print obj['Reservations'][0]['Instances'][0]['NetworkInterfaces'][0]['Association']['PublicIp']")

	printf "Trying to connect to VM ${1}(${VM_ip})..."
	while [ true ]; do
            sshpass -p '!bootstrap' ssh -q -T -o ConnectTimeout=2 -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null ${VM_user}@${VM_ip} hostname > /dev/null 2>&1
            if [ $? -eq 0 ]; then
		sshpass -p '!bootstrap' ssh -q -T -o ConnectTimeout=2 -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null ${VM_user}@${VM_ip} find /usr > /dev/null 2>&1
		if [ $? -eq 0 ]; then
                    break
		fi
		printf "+"
		continue
            fi
            printf "."
	done
	printf "connected\!\n"
    fi
    rm -f /tmp/$$.aws
}

VM_destroy()
{
    VM_power_down ${1}
    aws ec2 describe-instances --filter "Name=tag:Name,Values=$(echo ${1}|sed -e 's#,#\\,#g')" > /tmp/$$.aws 2>&1
    num_found=$(cat /tmp/$$.aws|python -c "import json,sys;obj=json.load(sys.stdin);print len(obj['Reservations'])")
    if [ ${num_found} -eq 1 ]; then
	instance_id=$(cat /tmp/$$.aws|python -c "import json,sys;obj=json.load(sys.stdin);print obj['Reservations'][0]['Instances'][0]['InstanceId']")
	printf "Terminating VM ${1}(${instance_id})...\n"
	aws ec2 terminate-instances --instance-ids ${instance_id} > /dev/null 2>&1
	aws ec2 delete-tags --resources ${instance_id} --tags "Key=Name,Value=$(echo ${1}|sed -e 's#,#\\,#g')" > /dev/null 2>&1
        printf "\n"
    fi
}

VM_make_template()
{
    VM_power_down ${1}

    aws ec2 describe-instances --filter "Name=tag:Name,Values=$(echo ${1}|sed -e 's#,#\\,#g')" > /tmp/$$.aws 2>&1
    num_found=$(cat /tmp/$$.aws|python -c "import json,sys;obj=json.load(sys.stdin);print len(obj['Reservations'])")
    if [ ${num_found} -eq 1 ]; then
	num_images=$(aws ec2 describe-images --filter "Name=name,Values=$(echo ${1}|sed -e 's#,#/#g')"|python -c "import json,sys;obj=json.load(sys.stdin);print len(obj['Images'])")
	if [ ${num_images} -eq 1 ]; then
	    image_id=$(aws ec2 describe-images --filter "Name=name,Values=$(echo ${1}|sed -e 's#,#/#g')"|python -c "import json,sys;obj=json.load(sys.stdin);print obj['Images'][0]['ImageId']")
	    aws ec2 delete-tags --resources ${image_id} --tags "Key=Name,Value=$(echo ${1}|sed -e 's#,#\\,#g')" > /dev/null 2>&1
	    printf "Deregistering AMI (${image_id})..."
	    aws ec2 deregister-image --image-id ${image_id} > /dev/null 2>&1
	    while [ true ]; do
		num_images=$(aws ec2 describe-images --filter "Name=name,Values=$(echo ${1}|sed -e 's#,#/#g')" |python -c "import json,sys;obj=json.load(sys.stdin);print len(obj['Images'])")
		if [ $num_images -eq 0 ]; then
		    break
		fi
		printf "."
		sleep 1
	    done
	    printf "done\n"
	fi

	instance_id=$(cat /tmp/$$.aws|python -c "import json,sys;obj=json.load(sys.stdin);print obj['Reservations'][0]['Instances'][0]['InstanceId']")
	printf "Creating AMI from VM ${1}(${instance_id})..."
	aws ec2 create-image --instance-id ${instance_id} --name $(echo ${1}|sed -e 's#,#/#g') > /dev/null 2>&1

	while [ true ]; do
	    num_images=$(aws ec2 describe-images --filter "Name=name,Values=$(echo ${1}|sed -e 's#,#/#g')" |python -c "import json,sys;obj=json.load(sys.stdin);print len(obj['Images'])")
	    if [ $num_images -eq 1 ]; then
		break
	    fi
	    printf "+"
	    sleep 1
	done

	image_id=$(aws ec2 describe-images --filter "Name=name,Values=$(echo ${1}|sed -e 's#,#/#g')"|python -c "import json,sys;obj=json.load(sys.stdin);print obj['Images'][0]['ImageId']")
	while [ true ]; do
	    state=$(aws ec2 describe-images --image-id ${image_id}| python -c "import json,sys;obj=json.load(sys.stdin);print obj['Images'][0]['State']")
	    if [ "${state}" == "available" ]; then
		break
	    fi
	    printf "."
	    sleep 1
	done
        printf "done (${image_id})\n"
	aws ec2 create-tags --resources ${image_id} --tags "Key=Name,Value=$(echo ${1}|sed -e 's#,#\\,#g')" > /dev/null 2>&1

	#aws ec2 terminate-instances --instance-ids ${instance_id} > /dev/null 2>&1
	#aws ec2 delete-tags --resources ${instance_id} --tags "Key=Name,Value=$(echo ${1}|sed -e 's#,#\\,#g')" > /dev/null 2>&1
    fi
}

VM_clone()
{
    secgrp=$(aws --output text ec2 describe-security-groups --filter "Name=tag:Name,Values=ccBase*"|grep "^SECURITYGROUPS.*ccBase.*${vpc_id}"|sed -e 's#^.*\(sg-[^[:space:]]*\).*#\1#')
    subnets=( $(aws --output text ec2 describe-subnets --filters "Name=tag:Name,Values=ccBase*"|grep "^SUBNETS.*${vpc_id}"|sed -e 's#^.*\(subnet-[^[:space:]]*\).*#\1#') )

    num_images=$(aws ec2 describe-images --filter "Name=name,Values=$(echo ${1}|sed -e 's#,#/#g')"|python -c "import json,sys;obj=json.load(sys.stdin);print len(obj['Images'])")
    if [ ${num_images} -eq 1 ]; then
	ami_id=$(aws ec2 describe-images --filter "Name=name,Values=$(echo ${1}|sed -e 's#,#/#g')"|python -c "import json,sys;obj=json.load(sys.stdin);print obj['Images'][0]['ImageId']")
	printf "Cloning AMI ${1}(${ami_id}) to VM ${2}..."
	aws ec2 run-instances --associate-public-ip-address --subnet-id ${subnets[0]} --image-id ${ami_id} --security-group-ids ${secgrp} --count 1 --instance-type t2.medium --key-name cc-keypair --block-device-mappings "[{\"DeviceName\": \"/dev/sda1\",\"Ebs\":{\"VolumeSize\":20,\"DeleteOnTermination\":true}}]" > /tmp/$$.aws 2>&1
	instance_id=$(cat /tmp/$$.aws|python -c "import json,sys;obj=json.load(sys.stdin);print obj['Instances'][0]['InstanceId']")
	printf "${instance_id}\n"
	aws ec2 create-tags --resources ${instance_id} --tags "Key=Name,Value=$(echo ${2}|sed -e 's#,#\\,#g')" > /dev/null 2>&1

	VM_power_down ${2}
    fi
    rm -f /tmp/$$.aws
}

# Make way for our new VMs
VM_destroy CC-${ccVersion}${ccQualifier}
for type in "${node_types[@]}"; do
    VM_destroy CC-${type}-${ccVersion}${ccQualifier}
done

# Make a clone of our base VM
VM_clone ${ubu_base} CC-${ccVersion}${ccQualifier}

# Turn it on so we load it up with goodies
VM_power_up CC-${ccVersion}${ccQualifier}

printf "Making config payload:\n"
(
    cd ${build_base}/clearwater-infrastructure/clearwater-ovf-config/payload
    tar cvzf /var/tmp/cfg-payload.tgz . 2>&1|sed -e 's#^#   #'
)

printf "Transferring configuration payload..."
(
    sta=1
    while [ $sta -ne 0 ]; do
        sshpass -p '!bootstrap' scp -q -o ConnectTimeout=10 -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null /var/tmp/cfg-payload.tgz ${vSphere_user}@${VM_ip}:/tmp; sta=$?
    done
) 2>&1|sed -e 's#^#   #'
printf "done!\n"

#read -p "Press enter to continue: " a

printf "Unloading configuration payload on VM CC-${ccVersion}${ccQualifier}...\n"
(
    sta=1
    while [ $sta -ne 0 ]; do
        sshpass -p '!bootstrap' ssh -q -T -o ConnectTimeout=10 -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null  ${VM_user}@${VM_ip} 'bash -c "tar tvzf /tmp/cfg-payload.tgz;tar xvzf /tmp/cfg-payload.tgz -C /"';sta=$?
    done
)  2>&1|sed -e 's#^#   #'

printf "Disable configurator VM CC-${ccVersion}${ccQualifier}...\n"
(
    sta=1
    while [ $sta -ne 0 ]; do
        sshpass -p '!bootstrap' ssh -q -T -o ConnectTimeout=10 -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null  ${VM_user}@${VM_ip} 'bash -c "mv /var/cc-ovf/configurator /var/cc-ovf/configurator.not"';sta=$?
    done
)  2>&1|sed -e 's#^#   #'

#read -p "Press enter to continue: " a

printf "Running setup script on VM CC-${ccVersion}${ccQualifier}..."
(
    sta=1
    while [ $sta -ne 0 ]; do
        sshpass -p '!bootstrap' ssh -q -T -o ConnectTimeout=10 -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null  ${VM_user}@${VM_ip} 'bash -cx "cat /etc/apt/sources.list;/var/cc-ovf/bin/setup"';sta=$?
    done
) 2>&1|sed -e 's#^#   #'
printf "\n"

printf "Tranferring ${ccVersion} Debian repository to VM...\n"
(
    cd ${build_base}/REPO/
    (
        sta=1
        while [ $sta -ne 0 ]; do
            sshpass -p '!bootstrap' scp -q -v -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -p -r . root@${VM_ip}:/var/cc-ovf;sta=$?
        done
    ) 2>&1|sed -e 's#^#   #'
)

printf "Creating Package database for Debian repo on VM CC-${ccVersion}${ccQualifier}...\n"
(
    sta=1
    while [ $sta -ne 0 ]; do
        sshpass -p '!bootstrap' ssh -q -T -o ConnectTimeout=10 -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null ${VM_user}@${VM_ip} 'bash -xc "cd /var/cc-ovf;pwd;area=binary;dpkg-scanpackages --multiversion \$area /dev/null > \$area/Packages && gzip -9c \$area/Packages > $area/Packages.gz && rm -vf \$area/Release \$area/Release.gpg && apt-ftparchive -o APT::FTPArchive::Release::Codename=\$area release \$area > \$area/Release && gpg -abs -u maintainers@projectclearwater.org --batch --yes --passphrase dcl1234! --output \$area/Release.gpg \$area/Release;gpg -a --export maintainers@projectclearwater.org > Release.asc"';sta=$?
    done
)  2>&1|sed -e 's#^#   #'

printf "Updating APT on VM...\n"
(
    sta=1
    while [ $sta -ne 0 ]; do
        sshpass -p '!bootstrap' ssh -q -T -o ConnectTimeout=10 -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null ${VM_user}@${VM_ip} apt-get update;sta=$?
    done
) 2>&1|sed -e 's#^#   #'

#read -p "Press enter to continue: " a
# Now we have our Clearwater Core base VM for this release, so power it down and build individual node types
VM_power_down CC-${ccVersion}${ccQualifier}

VM_make_template CC-${ccVersion}${ccQualifier}

VM_destroy CC-${ccVersion}${ccQualifier}

for node_type in "${node_types[@]}"; do
    let done=0
    while [ $done -eq 0 ]; do
        # Make way for node type VM
        VM_destroy CC-${node_type}-${ccVersion}${ccQualifier}
        VM_clone CC-${ccVersion}${ccQualifier} CC-${node_type}-${ccVersion}${ccQualifier}
        VM_power_up CC-${node_type}-${ccVersion}${ccQualifier}
        cwrm=ls

        sta=1
        while [ $sta -ne 0 ]; do
            sshpass -p '!bootstrap' ssh -q -T -o ConnectTimeout=10 -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null ${VM_user}@${VM_ip} ls > /dev/null 2>&1;sta=$?
            if [ $sta -ne 0 ]; then
                continue
            fi
            sshpass -p '!bootstrap' ssh -q -T -o ConnectTimeout=10 -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null ${VM_user}@${VM_ip} rm -f /var/lib/dpkg/lock /var/cache/apt/archives/lock\;${cwrm} > /dev/null 2>&1
        done
        cwrm=ls

        for type in $(echo $node_type|sed -e 's#,# #g'); do
            printf "Installing ${type} on VM...\n"
            (
                (sshpass -p '!bootstrap' ssh -q -T -o ConnectTimeout=10 -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null ${VM_user}@${VM_ip} /var/cc-ovf/bin/install ${type}; sta=$?; echo $sta > /tmp/sta) 2>&1 | tee /tmp/${type}.out
            ) 2>&1|sed -e 's#^#   #'
            sta=$(cat /tmp/sta)
            grep -q "ERROR:" /tmp/${type}.out
            if [[ $? -eq 0 || $sta -ne 0 ]]; then
                printf "****\n*\n* WARN: failure installing $type - retrying!\n*\n****\n" 2>&1|sed -e 's#^#   #'
                cwrm=clearwater-remove
                break
            fi
        done
        if [ "$cwrm" == "ls" ]; then
            printf "Making reversion package:\n"
            (
                (sshpass -p '!bootstrap' ssh -q -T -o ConnectTimeout=10 -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null ${VM_user}@${VM_ip} tar cvzf /var/tmp/ovf.clearwater.tgz /etc/clearwater/ /etc/cassandra/ /etc/chronos/;sta=$?;echo $sta > /tmp/sta) 2>&1 | tee /tmp/${type}.out
            ) 2>&1|sed -e 's#^#   #'

            let done=1

            printf "What's installed per clearwater-version:\n"
            (
                sta=1
                while [ $sta -ne 0 ]; do
                    (sshpass -p '!bootstrap' ssh -q -T -o ConnectTimeout=10 -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null ${VM_user}@${VM_ip} clearwater-version;sta=$?;echo $sta > /tmp/sta) 2>&1 | tee /tmp/${type}.out
                    sta=$(cat /tmp/sta)
                    grep -q "clearwater-version: command not found" /tmp/${type}.out
                    if [ $? -eq 0 ]; then
                        printf "****\n*\n* WARN: failure installing $type - retrying!\n*\n****\n" 2>&1|sed -e 's#^#   #'
                        cwrm=clearwater-remove
                        break
                    fi
                done
            ) 2>&1|sed -e 's#^#   #'
            grep -q "clearwater-version: command not found" /tmp/${type}.out
            if [ $? -eq 0 ]; then
                cwrm=clearwater-remove
                let done=0
            fi
        fi
    done

    printf "Enabling configurator...\n"
    (
        (sshpass -p '!bootstrap' ssh -q -T -o ConnectTimeout=10 -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null ${VM_user}@${VM_ip} mv /var/cc-ovf/configurator.not /var/cc-ovf/configurator;sta=$?;echo $sta > /tmp/sta) 2>&1 | tee /tmp/${type}.out
    ) 2>&1|sed -e 's#^#   #'

    #read -p "Press enter to continue: " a

    printf "Removing local repo from APT sources...\n"
    sta=1
    while [ $sta -ne 0 ]; do
        (sshpass -p '!bootstrap' ssh -q -T -o ConnectTimeout=10 -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null ${VM_user}@${VM_ip} cp -p /etc/apt/sources.list.bak /etc/apt/sources.list\; apt-get update;sta=$?;echo $sta > /tmp/sta) 2>&1|sed -e 's#^#   #'
        sta=$(cat /tmp/sta)
        if [ $sta -ne 0 ]; then
            continue
        fi
    done

    printf "Make soft partitions...\n"
    sta=1
    while [ $sta -ne 0 ]; do
        (sshpass -p '!bootstrap' ssh -q -T -o ConnectTimeout=10 -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null ${VM_user}@${VM_ip} /usr/bin/clearwater-limitdir /var/clearwater-diags-monitor/dumps -l 5G -y\;/usr/bin/clearwater-limitdir /var/log -l 2G -y;sta=$?;echo $sta > /tmp/sta) 2>&1|sed -e 's#^#   #'
        sta=$(cat /tmp/sta)
        if [ $sta -ne 0 ]; then
            continue
        fi
    done

    printf "Reset hostname...\n"
    sta=1
    while [ $sta -ne 0 ]; do
        (sshpass -p '!bootstrap' ssh -q -T -o ConnectTimeout=10 -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null ${VM_user}@${VM_ip} rm -f /etc/hostname;sta=$?;echo $sta > /tmp/sta) 2>&1|sed -e 's#^#   #'
        sta=$(cat /tmp/sta)
        if [ $sta -ne 0 ]; then
            continue
        fi
    done

    printf "Reset to default config files...\n"
    sta=1
    while [ $sta -ne 0 ]; do
        (sshpass -p '!bootstrap' ssh -q -T -o ConnectTimeout=10 -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null ${VM_user}@${VM_ip} clearwater-stop\;cd /var/cc-ovf/default.cfg\;cp -rvp . /\;rm -vfr /var/lib/cassandra/\* /var/lib/clearwater-etcd/\* /var/lib/monit/state;sta=$?;echo $sta > /tmp/sta) 2>&1|sed -e 's#^#   #'
        sta=$(cat /tmp/sta)
        if [ $sta -ne 0 ]; then
            continue
        fi
    done

    VM_power_down CC-${node_type}-${ccVersion}${ccQualifier}

    VM_make_template CC-${node_type}-${ccVersion}${ccQualifier}

    VM_destroy CC-${node_type}-${ccVersion}${ccQualifier}
done

exit 0
