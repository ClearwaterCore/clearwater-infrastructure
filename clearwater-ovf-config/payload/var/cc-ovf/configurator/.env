env_ME=`echo $1|tr '\\\\' '/'|sed -e 's#\([A-Za-z]\):#/\1#'`
#echo "env_ME=$env_ME"
env_MYDIR=`cd ${env_ME};pwd`
#echo "env_MYDIR=$env_MYDIR"

if [ -L $env_MYDIR ]; then
    env_MYDIR=`readlink $env_MYDIR`
    env_MYDIR=`cd ${env_MYDIR};pwd`
fi

dhcp_vars=(fixed_address prefix_len routers domain_name_servers ntp_servers domain_search)
cc_vars=(etcd_cluster local_site_name remote_site_name)
mac_vars=(mgmt_mac_address sig_mac_address)
ip_vars=(ip_protocol)

RSHELL_prompt=$USERNAME
RSHELL_prompt=""
RSHELL_ip=127.0.0.1

if [ "$sm_port" == "" ]; then
    RSHELL_port=28254
else
    let "RSHELL_port=$sm_port + 3"
fi
if [ "$sm_cwd" == "" ]; then
    RTENV=`cd $env_MYDIR/..;pwd`
else
    RTENV=$sm_cwd
fi

if [ "$USER" != "" ]; then
    export "USERNAME=$USER"
fi

if [ "$CRAFT_USER" == "" ]; then
    export "CRAFT_USER=$USERNAME"
fi

doCmd()
{
    cmd=$1
    netstat -na|grep -q $RSHELL_port
    if [ $? -ne 0 ]; then
	printf "\n****\n**** No SystemManager is running\n****\n\n"
	return -1
    else
	$RTENV/exe/RShell -u $CRAFT_USER -c "$cmd" $RSHELL_ip:$RSHELL_port "$RSHELL_prompt"
	return 0
    fi
}

doCmdnc()
{
    cmd=$1
    netstat -na|grep -q $RSHELL_port
    if [ $? -ne 0 ]; then
	printf "\n****\n**** No SystemManager is running\n****\n\n"
	return -1
    else
	$RTENV/exe/RShell -x -u $CRAFT_USER -c "$cmd" $RSHELL_ip:$RSHELL_port "$RSHELL_prompt"
	return 0
    fi
}

logCmd()
{
    path=$2
    title=$3
    help=$4
    item=$5
    out=$6
    let "sta=$1"
    if [ ! -z $out ]; then
	if [ -e $out ]; then
	    OIFS=$IFS
	    IFS=
	    cat $out|while read -r line; do
   	       #printf "$CRAFT_USER: $title [$path] <@> $line\n"
	       /usr/bin/logger -i -t 'Ignite craft' -p local1.info "$CRAFT_USER: $title [$path] <@> $line"
	    done
	    IFS=$OIFS
	fi
    fi
    if [ $sta -eq 0 ]; then
	/usr/bin/logger -i -t 'Ignite craft' -p local1.info "$CRAFT_USER: $title [$path] =@= SUCCEEDED"
    else
	if [ $sta -ne 255 ]; then
	    /usr/bin/logger -i -t 'Ignite craft' -p local1.info "$CRAFT_USER: $title [$path] =@= FAILED"
	else
	    if [ $sta -eq 255 ]; then
		/usr/bin/logger -i -t 'Ignite craft' -p local1.info "$CRAFT_USER: $title [$path] =@= CANCELLED"
	    fi
	fi
    fi
}

doPrompt()
{
    PROMPT=$1
    HELP=$2
    DEFAULT=$3

    printf "\n${PROMPT}\n${HELP}The default value is: ${DEFAULT}\n: "
    read RESPONSE
    if [ "$RESPONSE" == "" ]; then
	RESPONSE=$DEFAULT
    fi
}

doConfirm()
{
    if [ "$1" != "" ]; then
	let "lim=$1"
    else
	let "lim=3"
    fi
    printf "\n"
    local confirm_done=0
    while [ $confirm_done -eq 0 ]; do
	if [ $lim -gt 2 ]; then
	    printf "  Please verify that this command is correct\n1   *OK        Execute this command\n2    Cancel    Cancel the operation\n3    Modify    Modify the parameters of this command\n: "
	else
	    printf "  Please verify that this command is correct\n1   *OK        Execute this command\n2    Cancel    Cancel the operation\n: "
	fi
	if [ ${#INPUT_stack[*]} -eq 0 ]; then
	    read INPUT
	    INPUT_stack=($INPUT)
	fi
	INPUT=${INPUT_stack[0]}
	INPUT_stack=(${INPUT_stack[@]:1})
	printf "\n-------------------------------------------------------------------------------\n\n"
	INPUT=`echo "$INPUT"|sed -e 's#[ 	]*##g'|sed -e 's#[^0-9]##g'`
	if [ "$INPUT" == "" ]; then
	    let "cfrm_no=1"
	else
	    let "cfrm_no=$INPUT"
	fi
	if ( (( $cfrm_no < 1 )) || (( $cfrm_no > $lim )) ); then
	    printf "[YOUR INPUT WAS NOT UNDERSTOOD]\n"
	else
	    return $cfrm_no
	fi
    done
}

chkIP()
{
    ipcalc $1 2>&1 | grep -q "INVALID"
    if [ $? -ne 0 ]; then
	echo $1|grep -q ":"
	if [ $? -eq 0 ]; then
	    chkIP_result="V6"
	else
	    chkIP_result="V4"
	fi
    else
	chkIP_result="invalid"
    fi
}

chkDomain()
{
    echo $1|grep -qP '(?=^.{1,254}$)(^(?:(?!\d+\.)[a-zA-Z0-9_\-]{1,63}\.?)+(?:[a-zA-Z]{2,})$)'
}

chkHost()
{
    echo $1|grep -qP '(?=^.{1,254}$)(^(?:(?!\d+\.)[a-zA-Z0-9_\-]{1,63})$)'
}

pfix2ip()
{
    let "pfix=$1"
    if [ -z $2 ]; then
	let "max=32"
    else
	let "max=$2"
    fi
    if [ $max -eq 32 ]; then
	let "mask=128"
	let "bits=8"
    else # Presume IPv6
	let "mask=32768"
	let "bits=16"
    fi
    let "i=0"
    let "part=0"
    ip=( 0 )
    while [ $i -lt $max ]; do
	if [ $pfix -ge 0 ]; then
	    let "part=( $part >> 1) | $mask"
	fi
	let "mod=$i % $bits"
	if [ $mod -eq 0 ] && [ $i -ne 0 ];then
	    let "idx=($i / $bits) - 1"
	    ip[$idx]=$part
	    #echo $idx $part
	    let "part=0"
	fi
	let "i=$i + 1"
	let "pfix=$pfix - 1"
    done
    if [ $pfix -ge 0 ]; then
	let "part=( $part >> 1) | $mask"
    fi
    let "idx=($i / $bits) - 1"
    ip[$idx]=$part
    #echo $idx $part
    pfix2ip_ret=""
    for part in ${ip[@]}; do
	if [ "$pfix2ip_ret" != "" ]; then
	    if [ $max -eq 32 ]; then
		pfix2ip_ret="${pfix2ip_ret}."
	    else
		pfix2ip_ret="${pfix2ip_ret}:"
	    fi
	fi
	if [ $max -eq 32 ]; then
	    pfix2ip_ret="${pfix2ip_ret}`printf \"%d\" \"$part\"`"
	else
	    pfix2ip_ret="${pfix2ip_ret}`printf \"%x\" \"$part\"`"
	fi
    done
}

getSettings()
{
    if [ -s /var/lib/cc-ovf/ovf.vars ]; then
	. /var/lib/cc-ovf/ovf.vars
    fi
    if [ -s /var/lib/cc-ovf/qcow.vars ]; then
	. /var/lib/cc-ovf/qcow.vars
    fi
    if [ -s /var/lib/cc-ovf/configurator.vars ]; then
	. /var/lib/cc-ovf/configurator.vars
    fi
    if [ -s /var/lib/cc-ovf/configurator.wip ]; then
	. /var/lib/cc-ovf/configurator.wip
    fi
}
