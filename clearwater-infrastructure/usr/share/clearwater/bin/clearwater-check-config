#!/bin/bash

# @file check-clearwater-config
#
# Project Clearwater - IMS in the Cloud
# Copyright (C) 2013  Metaswitch Networks Ltd
#
# This program is free software: you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation, either version 3 of the License, or (at your
# option) any later version, along with the "Special Exception" for use of
# the program along with SSL, set forth below. This program is distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;
# without even the implied warranty of MERCHANTABILITY or FITNESS FOR
# A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details. You should have received a copy of the GNU General Public
# License along with this program.  If not, see
# <http://www.gnu.org/licenses/>.
#
# The author can be reached by email at clearwater@metaswitch.com or by
# post at Metaswitch Networks Ltd, 100 Church St, Enfield EN2 6BQ, UK
#
# Special Exception
# Metaswitch Networks Ltd  grants you permission to copy, modify,
# propagate, and distribute a work formed by combining OpenSSL with The
# Software, or a work derivative of such a combination, even if such
# copying, modification, propagation, or distribution would otherwise
# violate the terms of the GPL. You must comply with the GPL in all
# respects for all of the code used other than OpenSSL.
# "OpenSSL" means OpenSSL toolkit software distributed by the OpenSSL
# Project and licensed under the OpenSSL Licenses, or a work based on such
# software and licensed under the OpenSSL Licenses.
# "OpenSSL Licenses" means the OpenSSL License and Original SSLeay License
# under which the OpenSSL Project distributes the OpenSSL toolkit software,
# as those licenses appear in the file LICENSE-OPENSSL.

CONFIG_DIR=/etc/clearwater

LOCAL_CONFIG=$CONFIG_DIR/local_config
SHARED_CONFIG=$CONFIG_DIR/shared_config
USER_SETTINGS=$CONFIG_DIR/user_settings
CLEARWATER_CONFIG=$CONFIG_DIR/config

# Check that a config file exists and is syntactically and semantically valid.
# Params:
#   1 - Either "mandatory" (if the file is required) or "optional" (otherwise).
#   2 - The full name and path of the config file to check.
check_file()
{
  local required=$1
  local filename=$2

  # Check that the file exists.
  if [[ ! -e "$filename" ]]; then
    if [[ "$required" = mandatory ]]; then
      echo "ERROR: $filename does not exist" >&2
      return 1
    fi
    return 0
  fi

  # There is no need to check that the file has read permissions - all files are
  # readable to root.

  # Check that the file is syntactically valid.
  if ! bash -n $filename; then
    echo "ERROR: $filename is not syntactically valid (see previous errors for details)" >&2
    return 1
  fi

  return 0
}


# Check that there are no options in shared config that it would be bad to
# share (e.g. `local_ip`).
#
# This function is "unsafe" in the sense that it pollutes the environment, so
# must be called from within a subshell (which `check_option_locations` does).
check_option_locations_unsafe()
{
  #
  # ATTENTION
  #
  # All variables in this script are in uppercase to avoid clashes with real
  # options in the config files.
#
  # List all the options that definitely shouldn't be shared between nodes.
  NON_SHARED_OPTIONS="local_ip public_ip public_hostname node_idx etcd_cluster etcd_cluster_key"

  # Load the shared config
  SHARED_CONFIG_FILE=/etc/clearwater/shared_config
  source $SHARED_CONFIG_FILE

  # Check each non-shared option in turn, and check its not present in our
  # environment.
  RC=0
  for OPT in $NON_SHARED_OPTIONS; do
    # The `${!OPT}` use bash indirection - it checks the variable who name is
    # stored as the value of `OPT`
    if [[ -n ${!OPT} ]]; then
      echo "ERROR: $OPT is present in $SHARED_CONFIG_FILE"
      RC=1
    fi
  done

  exit $RC
}


check_option_locations()
{
  # Call the function that actually does the checking. We need to call it from
  # a subshell so export the function first.
  export -f check_option_locations_unsafe
  ( check_option_locations_unsafe )
}


check_config_values()
{
  # Run a python script to check the contents of the config file. We need to
  # source in /etc/clearwater/config first so do this within a subshell. The
  # `set -a` means that all variables from the config file get automatically
  # exported so are accessible from python.
  (
    set -a
    source /etc/clearwater/config
    python /usr/share/clearwater/bin/check_config_contents.py
  )
}

#
# Script starts here.
#

if [[ "$EUID" != 0 ]]; then
  echo "$0 must be run as root" >&2
  exit 2
fi

# The return code that the script will return.
rc=0

# Check the files are present (if required) and are syntactically correct.
check_file mandatory $LOCAL_CONFIG       || rc=1
check_file mandatory $SHARED_CONFIG      || rc=1
check_file optional  $USER_SETTINGS      || rc=1
check_file mandatory $CLEARWATER_CONFIG  || rc=1

# If any of the files are invalid there isn't much point in continuing.
if [[ "$rc" != 0 ]]; then
  exit $rc
fi

# Check that the config options are in the correct files.  Currently this just
# checks that no local/user settings are put into shared config.
check_option_locations || rc=1

# Check that the config is semantically correct (e.g. required options are
# present, they are correctly formatted, etc).
check_config_values || rc=1

# Print out a soothing message to the user if all the checks passed.
if [[ "$rc" -eq 0 ]]; then
  echo "All config checks passed"
fi

exit $rc
