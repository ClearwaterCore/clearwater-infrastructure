#!/bin/bash

# @file check-clearwater-config
#
# Project Clearwater - IMS in the Cloud
# Copyright (C) 2013  Metaswitch Networks Ltd
#
# This program is free software: you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation, either version 3 of the License, or (at your
# option) any later version, along with the "Special Exception" for use of
# the program along with SSL, set forth below. This program is distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;
# without even the implied warranty of MERCHANTABILITY or FITNESS FOR
# A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details. You should have received a copy of the GNU General Public
# License along with this program.  If not, see
# <http://www.gnu.org/licenses/>.
#
# The author can be reached by email at clearwater@metaswitch.com or by
# post at Metaswitch Networks Ltd, 100 Church St, Enfield EN2 6BQ, UK
#
# Special Exception
# Metaswitch Networks Ltd  grants you permission to copy, modify,
# propagate, and distribute a work formed by combining OpenSSL with The
# Software, or a work derivative of such a combination, even if such
# copying, modification, propagation, or distribution would otherwise
# violate the terms of the GPL. You must comply with the GPL in all
# respects for all of the code used other than OpenSSL.
# "OpenSSL" means OpenSSL toolkit software distributed by the OpenSSL
# Project and licensed under the OpenSSL Licenses, or a work based on such
# software and licensed under the OpenSSL Licenses.
# "OpenSSL Licenses" means the OpenSSL License and Original SSLeay License
# under which the OpenSSL Project distributes the OpenSSL toolkit software,
# as those licenses appear in the file LICENSE-OPENSSL.

CONFIG_DIR=/etc/clearwater

LOCAL_CONFIG=$CONFIG_DIR/local_config
SHARED_CONFIG=$CONFIG_DIR/shared_config
USER_SETTINGS=$CONFIG_DIR/user_settings
CLEARWATER_CONFIG=$CONFIG_DIR/config

# Utility function for writing messages to stderr.
error()
{
  echo "ERROR: $@" >&2
}

# Utility function to get an option from a specific config file.
# Params:
#   1 - The option to retrieve
#   2 - The file to search
get_option_from_file()
{
  opt_name=$1
  filename=$2

  # We're about to source in a config file so start a new shell to avoid
  # polluting our environment.  The `${!opt}` is bash indirection - it retrieves
  # the value of the parameter whose name is the value of `opt`
  ( source $filename; echo ${!opt_name} )
}

# Check whether an option is present in a specific config file.
# Params:
#   1 - The option to check
#   2 - The file to search
is_option_in_file()
{
  opt_name=$1
  filename=$2

  [ -n "$( get_option_from_file $opt_name $filename )" ]
}

# Check that an option is not in a specific file. If it is, print an error to
# stderr and return a false return code.
# Params:
#   1 - The option to check
#   2 - The file to search
check_option_not_in_file()
{
  opt_name=$1
  filename=$2

  if is_option_in_file $opt_name $filename; then
    error "$opt_name should not be placed in $filename"
    return 1
  else
    return 0
  fi
}

# Check that a config file exists and is syntactically and semantically valid.
# Params:
#   1 - Either "mandatory" (if the file is required) or "optional" (otherwise).
#   2 - The full name and path of the config file to check.
check_file()
{
  local required=$1
  local filename=$2

  # Check that the file exists.
  if [[ ! -e "$filename" ]]; then
    if [[ "$required" = mandatory ]]; then
      error "$filename does not exist"
      return 1
    fi
    return 0
  fi

  # There is no need to check that the file has read permissions - all files are
  # readable to root.

  # Check that the file is syntactically valid.
  if ! bash -n $filename; then
    error "$filename is not syntactically valid (see previous errors for details)"
    return 1
  fi

  return 0
}

# Check that certain important config options are not put in the wrong place.
check_option_locations()
{
  local local_rc=0

  # First, check that there are no options in shared config that really
  # shouldn't be shared.
  check_option_not_in_file "local_ip"         $SHARED_CONFIG || local_rc=1
  check_option_not_in_file "public_ip"        $SHARED_CONFIG || local_rc=1
  check_option_not_in_file "public_hostname"  $SHARED_CONFIG || local_rc=1
  check_option_not_in_file "node_idx"         $SHARED_CONFIG || local_rc=1
  check_option_not_in_file "etcd_cluster"     $SHARED_CONFIG || local_rc=1
  check_option_not_in_file "etcd_cluster_key" $SHARED_CONFIG || local_rc=1

  # Now check that log_level is not set in any file other than user_settings.
  # If it is it won't work.
  check_option_not_in_file "log_level" $LOCAL_CONFIG  || local_rc=1
  check_option_not_in_file "log_level" $SHARED_CONFIG || local_rc=1

  return $local_rc
}

# Check that the config options are valid.
check_config_values()
{
  # Run a python script to check the contents of the config file. We need to
  # source in /etc/clearwater/config first so do this within a subshell. The
  # `set -a` means that all variables from the config file get automatically
  # exported so are accessible from python.
  (
    set -a
    source /etc/clearwater/config
    python /usr/share/clearwater/bin/check_config_contents.py
  )
}

#
# Script starts here.
#

if [[ "$EUID" != 0 ]]; then
  echo "$0 must be run as root" >&2
  exit 2
fi

# The return code that the script will return.
rc=0

# Check the files are present (if required) and are syntactically correct.
check_file mandatory $LOCAL_CONFIG       || rc=1
check_file mandatory $SHARED_CONFIG      || rc=1
check_file optional  $USER_SETTINGS      || rc=1
check_file mandatory $CLEARWATER_CONFIG  || rc=1

# If any of the files are invalid there isn't much point in continuing.
if [[ "$rc" != 0 ]]; then
  exit $rc
fi

# Check that the config options are in the correct files.  Currently this just
# checks that no local/user settings are put into shared config.
check_option_locations || rc=1

# Check that the config is semantically correct (e.g. required options are
# present, they are correctly formatted, etc).
check_config_values || rc=1

# Print out a soothing message to the user if all the checks passed.
if [[ "$rc" -eq 0 ]]; then
  echo "All config checks passed"
fi

exit $rc
