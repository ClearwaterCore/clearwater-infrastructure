#!/usr/bin/env python
# Copyright (C) 2016 Metaswitch Networks Ltd. All rights reserved.

import sys
import requests
import argparse
import re
from configobj import ConfigObj
import xml.etree.ElementTree as ET


parser = argparse.ArgumentParser(description='Unregister a subscriber.')
parser.add_argument('impu',
                    help='The public identity of the subscriber to unregister, '
                         'e.g. sip:1234@example.com or tel:+5678.',
                    type=str)
args = parser.parse_args()


CONFIG_FILE = '/etc/clearwater/shared_config'
SPROUT_MGMT_HOSTNAME = 'sprout_mgmt_hostname'
HS_MGMT_HOSTNAME = 'hs_mgmt_hostname'


def main():
    # Check the input is a valid IMPU.
    impu = args.impu
    sip_impu_regex = re.compile('sip:.+@.+$')
    tel_impu_regex = re.compile('tel:\+?[0-9]+$')
    if sip_impu_regex.match(impu) is None and tel_impu_regex.match(impu) is None:
        sys.exit("{} is not a valid public identity.".format(impu))

    # Find the location of the APIs to query.
    config = ConfigObj(CONFIG_FILE)
    sprout_mgmt_hostname = config.get(SPROUT_MGMT_HOSTNAME)
    hs_mgmt_hostname = config.get(HS_MGMT_HOSTNAME)
    if not sprout_mgmt_hostname or not hs_mgmt_hostname:
        sys.exit('Unable to find value of both {} and {}. Are they set in {}?'
                 .format(SPROUT_MGMT_HOSTNAME, HS_MGMT_HOSTNAME, CONFIG_FILE))

    # We need to query Homestead for the registration data first because
    # the bindings and subscriptions are keyed off the primary public identity
    # in Sprout, and we don't know what this subscriber's primary public
    # identity is yet. For the same reason, if the Homestead query fails for
    # whatever reason, we immediately give up.
    reg_data_url = 'http://{}/impu/{}/reg-data'.format(hs_mgmt_hostname, impu)

    try:
        reg_data_r = requests.get(reg_data_url)
    except requests.exceptions.ConnectionError:
        sys.exit('Unable to connect to the Homestead HTTP stack.\nPlease '
                 'contact your system administrator.')

    if reg_data_r.status_code == 200:
        try:
            reg_data = ET.fromstring(reg_data_r.content)
            reg_state = reg_data.find('RegistrationState').text

            if reg_state == 'NOT_REGISTERED':
                sys.exit('Subscriber {} is not assigned to this S-CSCF.'.format(impu))
            else:
                # The first public identity is the primary public identity. We
                # save this off.
                primary_impu = reg_data.find('IMSSubscription/ServiceProfile/PublicIdentity/Identity').text
        except (ET.ParseError, AttributeError, KeyError):
            sys.exit('Registration information XML returned in unexpected format.\n'
                     'Please contact your system administrator.')
    elif reg_data_r.status_code == 502:
        sys.exit('Unable to contact HSS.\nPlease contact your system administrator.')
    elif reg_data_r.status_code == 503:
        sys.exit('HSS gateway is currently overloaded.\nPlease try again later.')
    else:
        sys.exit('Unable to retrieve subscriber\'s subscription XML due to unexpected '
                 '{} error.\nPlease contact your system administrator.'.format(reg_data_r.status_code))

    # Now we can build the URL for Sprout's unregister API.
    unregister_url = 'http://{}/impu/{}'.format(sprout_mgmt_hostname, primary_impu)

    try:
        r = requests.delete(unregister_url)
    except requests.exceptions.ConnectionError:
        sys.exit('Unable to connect to the Sprout HTTP stack.\nPlease contact '
                 'your system administrator.')

    if r.status_code == 200:
        sys.exit('Successfully unregistered {}'.format(impu))
    elif r.status_code == 400:
        sys.exit('Operation failed - {} is not assigned to this S-CSCF.'.format(impu))
    elif r.status_code == 500:
        sys.exit('Operation failed - unable to expire registration bindings '
                 'for {}.\nPlease contact your system administrator.'.format(impu))
    elif r.status_code == 502:
        sys.exit('Operation failed - unable to unregister subscriber.\nPlease '
                 'contact your system administrator.')
    else:
        sys.exit('Operation failed with unexpected {} error.\nPlease contact '
                 'your system administrator.'.format(r.status_code))


if __name__ == '__main__':
    main()
